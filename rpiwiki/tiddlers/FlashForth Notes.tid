created: 20240816163231844
modified: 20240821164806178
tags: Arduino Forth
title: FlashForth Notes
type: text/vnd.tiddlywiki

!240816 
I am installing ~FlashForth on  [[Arduino Nano]] (probably a clone from Tayda), which uses 328P chip.

I cloned FF thus:

```
$ git clone https://github.com/oh2aun/flashforth.git
```
There already exists a binary in hex/ that looks good: 328-16MHz-38400.hex

The [[notes|https://flashforth.com/atmega.html]] indicate the extended fuses need special attention:

```
Program the chip with avrdude or some other tool using fuses: extended(see below) high(0xdf) low(0xff). The extended fuse should be set to the highest Brown-Out-Detection level your design can use. Without BOD in use there has been some eeprom corruption observed at address zero of the eeprom. For 5 volt (Arduino) boards the extended fuse should be 0xfc for the 328 and 2560. For the 32u4 it should be 0xf8.
```

extended = 0xfc

A little later on we see the avrdude command line with the fuse settings:

```
... -U efuse:w:0xff:m -U hfuse:w:0xdf:m -U lfuse:w:0xff:m
```

What happened to extended = 0xfc?

In the end I got mostly confused on fuse bits and opted NOT to change any of them, just burning a copy of ~FlashForth.

```
$ avrdude -p m328pb -c usbtiny -e -U flash:w:328-16MHz-38400.hex:i 
```
```
Timex:hex timborn$ avrdude -p m328pb -c usbtiny -e -U flash:w:328-16MHz-38400.hex:i 
avrdude: AVR device initialized and ready to accept instructions
avrdude: device signature = 0x1e9516 (probably m328pb)
avrdude: erasing chip

avrdude: processing -U flash:w:328-16MHz-38400.hex:i
avrdude: reading input file 328-16MHz-38400.hex for flash
         with 8426 bytes in 2 sections within [0, 0x7f67]
         using 67 pages and 150 pad bytes
avrdude: writing 8426 bytes flash ...
Writing | ################################################## | 100% 11.67 s 
avrdude: 8426 bytes of flash written
avrdude: verifying flash memory against 328-16MHz-38400.hex
Reading | ################################################## | 100% 7.89 s 
avrdude: 8426 bytes of flash verified

avrdude done.  Thank you.
```

OK, NOW HOW TO DO I CONNECT TO THIS THING?
Presumably the 38400 is a baud rate, suggesting serial I/O, but is that serial over the USB port?

Used Arduino IDE and opened a serial terminal with 38,400 baud and it works!

!!How To Read Fuse Bits

We will read the default fuse value first.
To do that, you need to run the following command.
This creates three files, one for each of the three fuse bytes.

```
avrdude -c usbtiny -p m328pb -U lfuse:r:low_fuse_val.txt:h -U hfuse:r:high_fuse_val.txt:h -U efuse:r:ext_fuse_val.txt:h
```



For the record, original nano knockoff shows fd / da / ff for ext/hi/low.

!!All About Fuse Bits 

Here's everything you need to know about fuse bits on a Atmel AVR 328P from the [[328P Datasheet|https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf]].  Refer to section 27.2.

NB MSB is bit 7, LSB is bit 0.

[img[Table 27-4.jpg]]
[img[Table 27-5.jpg]]
OK, someone explain to me why we have TWO tables for the single extended byte, and the bits do not agree?

[img[Table 28-5.jpg]]

[img[Table 27-7.jpg]]
[img[Table 27-6.jpg]]

ASSUMING you use 0xfc for the extended bits, then the extended bits are enabling (zero) brownout level 0 & 1, which based on table 28-5 appears to be basically enable brownout on a 5V device.

High bits 0xdf enable serial programing and downloading.
They also set BOOTSIZE=256 words, which means the bootloader, if there is one, fits between 0x3F00 and 0x3FFF.
Consequently the program flash area expands to fill the space not used by the bootloader.

Low bits 0xff leave everything unprogrammed.

''TODO'': what is the signature of the chip on the Nano knockoff?

```
avrdude: Device signature = 0x1e9516 (probably m328pb)
avrdude: Expected signature for ATmega328P is 1E 95 0F
```
Based on the label on the chip, I confirm MEGA328PB.
[[Differences betweenn 328P and 328PB|https://www.pololu.com/file/0J1464/Atmel-42559-Differences-between-ATmega328P-and-ATmega328PB_ApplicationNote_AT15007.pdf]]
Short story: full backward compatibility, so anything compiled for 328P will work on 328PB.

''TODO'': how do I find what serial port USBTinyIUSP is using?
Adafruit answers this for us:

```
Why is there no Serial/COM/port (or /dev/ttyXX device) ?
USBtiny is not a USB-Serial device, it is its own USB protocol which is understood by Avrdude. You will not see a COM port or Serial port created when you plug it in.
```

!280819

I was finally able to get ff-shell3.py to work, but I had to hack the code for Python3:

```
(fsh> ) Timex:shell timborn$ git diff ff-shell3.py
diff --git a/shell/ff-shell3.py b/shell/ff-shell3.py
index 6577af9..c96c104 100755
--- a/shell/ff-shell3.py
+++ b/shell/ff-shell3.py
@@ -63,7 +63,8 @@ cmd_dictionary = {
 
 class Config(object):
   def __init__(self):
-    self.serial_port  = '/dev/ttyACM0'
+    # self.serial_port  = '/dev/ttyACM0'
+    self.serial_port  = '/dev/tty.usbserial-1410'
     self.rate = '38400'
     self.hw = False
     self.sw = False
@@ -116,7 +117,8 @@ def parse_arg(config):
   parser = argparse.ArgumentParser(description="Small shell for FlashForth.")
            #epilog="""End-of-line flow control with a 1 second timeout is always active.""")
   parser.add_argument("--port", "-p", action="store",
-         type=str, default="/dev/ttyACM0", help="Serial port name, default = /dev/ttyACM0")
+         # type=str, default="/dev/ttyACM0", help="Serial port name, default = /dev/ttyACM0")
+         type=str, default="/dev/tty.usbserial-1410", help="Serial port name, default = /dev/tty.usbserial-1410")
   parser.add_argument("--hw", action="store_true",
          default=False, help="Serial port RTS/CTS enable")
   parser.add_argument("--sw", action="store_true",
@@ -153,10 +155,12 @@ def main():
  
   # readline.parse_and_bind("tab: complete")
   histfn = os.path.join(os.path.expanduser("~"), ".ff.history")
+  # e = None  # Declare 'e' here TDB hack
   try:
     readline.set_history_length(500)
     readline.read_history_file(histfn)
-  except(IOError, e):
+  # except(IOError, e):
+  except Exception as e:
     print(e)
     pass
   atexit.register(readline.write_history_file, histfn)
```

I was able to 

```
#help
#pwd
#cd ..
#send case.fs
#send case-test.fs
```

Works great.
Even better: ''the words I loaded persist over power out!''

Pattern: there is an idiom for marking a group of words (presumably coming from a file) such that they can be rolled back, so as you iterate over changing the words, every time you load them, the first thing it does is try to wipe out previous version.
This should keep from using all available space for no good reason.

Assuming filename case.fs with words related to case statements, the opening lines are:

```
-case
marker -case
```
